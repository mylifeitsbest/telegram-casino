import os
import random
import time
import json
from dotenv import load_dotenv
from telebot import TeleBot
from telebot.types import (
    InlineKeyboardMarkup, 
    InlineKeyboardButton,
    WebAppInfo,
    ReplyKeyboardMarkup,
    KeyboardButton
) 

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
if not TOKEN:
    print("–û–®–ò–ë–ö–ê: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞")
    print("–∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ –Ω–µ–≥–æ —Å—Ç—Ä–æ–∫—É: TELEGRAM_BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–±–æ—Ç–∞")
    exit(1)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–æ–∫–µ–Ω–∞
if not TOKEN or ':' not in TOKEN or len(TOKEN.split(':')) != 2:
    print("–û–®–ò–ë–ö–ê: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞!")
    print("–¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 1234567890:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghi")
    print(f"–¢–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω: {TOKEN[:10]}... (—Å–∫—Ä—ã—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)")
    exit(1)

print(f"–¢–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω: {TOKEN[:10]}... (—Å–∫—Ä—ã—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)")

bot = TeleBot(TOKEN)

# URL –≤–∞—à–µ–≥–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
WEBAPP_URL = "https://piskapiska99.github.io/telegram-casino/"
CASES_WEBAPP_URL = "https://piskapiska99.github.io/telegram-casino/cases.html"

# –°–∏–º–≤–æ–ª—ã –¥–ª—è —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã
SYMBOLS = ['üíé', 'üí∞', '‚õèÔ∏è']

# –ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –≤—ã–∏–≥—Ä—ã—à–∞
MULTIPLIERS = {
    'üíéüíéüíé': 5,    # –¢—Ä–∏ –∞–ª–º–∞–∑–∞
    'üí∞üí∞üí∞': 3,    # –¢—Ä–∏ –º–µ—à–∫–∞ —Å –¥–µ–Ω—å–≥–∞–º–∏
    '‚õèÔ∏è‚õèÔ∏è‚õèÔ∏è': 2,    # –¢—Ä–∏ –∫–∏—Ä–∫–∏
    'üíéüíé': 2,      # –î–≤–∞ –∞–ª–º–∞–∑–∞
    'üí∞üí∞': 1.5,    # –î–≤–∞ –º–µ—à–∫–∞ —Å –¥–µ–Ω—å–≥–∞–º–∏
    '‚õèÔ∏è‚õèÔ∏è': 1.2,    # –î–≤–µ –∫–∏—Ä–∫–∏
}

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USERS_DATA_FILE = 'users_data.json'

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ø–∞–º—è—Ç–∏)
users = {}

def load_users_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
    global users
    try:
        if os.path.exists(USERS_DATA_FILE):
            with open(USERS_DATA_FILE, 'r', encoding='utf-8') as f:
                users = json.load(f)
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ –∏–∑ —Å—Ç—Ä–æ–∫ –æ–±—Ä–∞—Ç–Ω–æ –≤ —á–∏—Å–ª–∞
                users = {int(k): v for k, v in users.items()}
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        users = {}

def save_users_data():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
    try:
        with open(USERS_DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(users, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

def get_user_balance(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in users:
        users[user_id] = {'balance': 10000, 'inventory': []}
        save_users_data()
    return users[user_id]['balance']

def update_user_balance(user_id, amount):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in users:
        users[user_id] = {'balance': amount, 'inventory': []}
    else:
        users[user_id]['balance'] = amount
    save_users_data()

def calculate_win(symbols):
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    symbols_str = ''.join(symbols)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∏–∑ —Ç—Ä—ë—Ö —Å–∏–º–≤–æ–ª–æ–≤
    if symbols_str in MULTIPLIERS:
        return MULTIPLIERS[symbols_str]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∏–∑ –¥–≤—É—Ö —Å–∏–º–≤–æ–ª–æ–≤
    for i in range(len(SYMBOLS)):
        symbol = SYMBOLS[i]
        if symbols.count(symbol) >= 2:
            two_symbols = symbol * 2
            if two_symbols in MULTIPLIERS:
                return MULTIPLIERS[two_symbols]
    
    return 0

def get_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"""
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    web_app = WebAppInfo(url=WEBAPP_URL)
    cases_web_app = WebAppInfo(url=CASES_WEBAPP_URL)
    keyboard.add(KeyboardButton(text="üé∞ –û—Ç–∫—Ä—ã—Ç—å –∫–∞–∑–∏–Ω–æ", web_app=web_app))
    keyboard.add(KeyboardButton(text="üì¶ –û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å—ã", web_app=cases_web_app))
    return keyboard

@bot.message_handler(commands=['start'])
def start_command(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    cases_button = types.KeyboardButton(
        text="üé≤ –û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å—ã",
        web_app=types.WebAppInfo(url=f"{WEBAPP_URL}/cases.html")
    )
    upgrade_button = types.KeyboardButton(
        text="‚¨ÜÔ∏è –ê–ø–≥—Ä–µ–π–¥",
        web_app=types.WebAppInfo(url=f"{WEBAPP_URL}/upgrade.html")
    )
    markup.add(cases_button, upgrade_button)
    
    bot.reply_to(
        message,
        "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=markup
    )

@bot.message_handler(commands=['reset_balance'])
def reset_balance(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    # –ó–∞–º–µ–Ω–∏—Ç–µ ADMIN_ID –Ω–∞ –≤–∞—à ID –≤ Telegram
    ADMIN_ID = 123456789  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID
    
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ 10000 –º–æ–Ω–µ—Ç
    for user_id in users:
        users[user_id]['balance'] = 10000
    save_users_data()
    bot.reply_to(message, "–ë–∞–ª–∞–Ω—Å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–±—Ä–æ—à–µ–Ω –Ω–∞ 10000 –º–æ–Ω–µ—Ç.")

@bot.message_handler(content_types=['web_app_data'])
def handle_web_app_data(message):
    try:
        data = json.loads(message.web_app_data.data)
        user_id = message.from_user.id
        
        if data.get('action') == 'get_data' or data.get('action') == 'get_balance':
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            balance = get_user_balance(user_id)
            response_data = {
                'balance': balance,
                'inventory': users.get(user_id, {}).get('inventory', [])
            }
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏ JSON
            bot.send_message(user_id, f"web_app_data:{json.dumps(response_data)}")
            return

        if data.get('action') == 'update_data':
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            update_user_balance(user_id, data['balance'])
            if 'inventory' in data:
                if user_id not in users:
                    users[user_id] = {'balance': data['balance'], 'inventory': []}
                users[user_id]['inventory'] = data['inventory']
            save_users_data()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
            response_data = {
                'balance': get_user_balance(user_id),
                'inventory': users.get(user_id, {}).get('inventory', [])
            }
            bot.send_message(user_id, f"web_app_data:{json.dumps(response_data)}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
            if 'won_item' in data:
                bot.reply_to(message, f"–í—ã –ø–æ–ª—É—á–∏–ª–∏: {data['won_item']['name']}")
            elif 'item_sold' in data:
                bot.reply_to(message, f"–í—ã –ø—Ä–æ–¥–∞–ª–∏ {data['item_sold']['name']} –∑–∞ {data['item_sold']['value']} –º–æ–Ω–µ—Ç")
            return

        if data.get('action') == 'update_balance':
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±–∞–ª–∞–Ω—Å
            update_user_balance(user_id, data['balance'])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
            response_data = {
                'balance': get_user_balance(user_id)
            }
            bot.send_message(user_id, f"web_app_data:{json.dumps(response_data)}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
            if data.get('credit_taken'):
                bot.reply_to(message, "–í—ã –≤–∑—è–ª–∏ –∫—Ä–µ–¥–∏—Ç –≤ 1000 –º–æ–Ω–µ—Ç")
            elif 'win_amount' in data:
                if data['win_amount'] > 0:
                    bot.reply_to(message, f"–í—ã–∏–≥—Ä—ã—à: {data['win_amount']} –º–æ–Ω–µ—Ç (x{data['multiplier']})")
                else:
                    bot.reply_to(message, "–ù–µ—Ç –≤—ã–∏–≥—Ä—ã—à–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏")
            return

    except Exception as e:
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler()
def handle_message(message):
    if message.text.lower() == "–∞–ª–∏–Ω–∞":
        bot.reply_to(message, "–∞–ª–∏–∫")
        return
    elif message.text.lower() == "–æ–ª–µ–≥":
        bot.reply_to(message, "–∫–æ—Ä–æ–ª—å —à–∫–æ–ª—ã 46")
        return

@bot.message_handler(commands=['upgrade'])
def upgrade_command(message):
    user_id = str(message.from_user.id)
    inventory = db.get_inventory(user_id)
    balance = db.get_user(user_id)['balance']
    
    markup = types.InlineKeyboardMarkup()
    upgrade_button = types.InlineKeyboardButton(
        text="üîÑ –û—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–ø–≥—Ä–µ–π–¥–∞",
        web_app=types.WebAppInfo(url=f"{WEBAPP_URL}/upgrade.html")
    )
    markup.add(upgrade_button)
    
    bot.reply_to(
        message,
        "üîÑ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–ø–≥—Ä–µ–π–¥–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:",
        reply_markup=markup
    )

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
load_users_data()

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API Telegram
        print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API Telegram...")
        bot_info = bot.get_me()
        print(f"–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.username}")
        print(f"–ò–º—è –±–æ—Ç–∞: {bot_info.first_name}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ long polling...")
        bot.infinity_polling(timeout=60, long_polling_timeout=60)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –≤ —Ñ–∞–π–ª–µ .env")
        print("–¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: TELEGRAM_BOT_TOKEN=1234567890:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghi")
        print("\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:")
        print("1. –í—ã —Å–æ–∑–¥–∞–ª–∏ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather –≤ Telegram")
        print("2. –í—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ —Ñ–∞–π–ª .env")
        print("3. –¢–æ–∫–µ–Ω –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏–ª–∏ —Å–∏–º–≤–æ–ª–æ–≤")
        print("4. –£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
